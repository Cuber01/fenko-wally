// Requires Fenko to run. See https://github.com/Cuber01/fenko-wally

var canvasHeight = 128;
var canvasWidth = 128;

class PaddleA
{
    init()
    {
        this.w = 30;
        this.h = 5;
        this.x = 20;
        this.y = 12;
    }

    update()
    {

        if(input.isButtonPressed(1073741904) && this.x > 0 ) // SDLK_LEFT
        {
            this.x--;
        }
        else if (input.isButtonPressed(1073741903) && this.x + this.w < canvasWidth) // SDLK_RIGHT
        {
            this.x++;
        }

    }

    draw()
    {
        draw.rectfill(this.x, this.y, this.w, this.h, 7);
    }
}

class PaddleB
{
    init()
    {
        this.w = 30;
        this.h = 5;
        this.x = 20;
        this.y = 113;
    }

    update()
    {

        if (input.isButtonPressed(97) && this.x > 0 ) // SDLK_a
        {
            this.x--;
        }
        else if(input.isButtonPressed(100) && this.x + this.w < canvasWidth) // SDLK_d
        {
            this.x++;
        }

    }

    draw()
    {
        draw.rectfill(this.x, this.y, this.w, this.h, 7);
    }
}

class Ball
{
    init()
    {
        this.x = 10;
        this.y = 64;
        this.r = 3;
        this.w = 4;
        this.h = 4;
        this.vel_x = 1;
        this.vel_y = 1;
    }

    collision(padA, padB)
    {
         if(padA.y == this.y)
         {
             if( this.x >= padA.x && this.x <= (padA.x + padA.w) )
             {
                 this.vel_y = -this.vel_y;
             }
         }

         if( padB.y == this.y )
         {
             if( this.x >= padB.x && this.x <= (padB.x + padB.w) )
             {
                 this.vel_y = -this.vel_y;
             }
         }

        if (this.y + this.h >= canvasHeight)
        {
            this.vel_y = -1;
        }
        else if (this.y - this.h <= 0)
        {
            this.vel_y = 1;
        }
        else if (this.x + this.w >= canvasWidth)
        {
            this.vel_x = -1;
        }
        else if (this.x - this.w <= 0)
        {
            this.vel_x = 1;
        }

        return true;
    }

    move()
    {
        this.x += this.vel_x;
        this.y += this.vel_y;
    }

    update(padA, padB)
    {
        this.collision(padA, padB);
        this.move();
    }

    draw()
    {
        draw.circfill(this.x, this.y, this.r, 8);
    }
}

var paddleA = PaddleA();
var paddleB = PaddleB();
var ball = Ball();

while(true)
{
    input.update();
    draw.clear(0);

    paddleA.update();
    paddleB.update();
    ball.update(paddleA, paddleB);

    paddleA.draw();
    paddleB.draw();
    ball.draw();

    render.draw();
}